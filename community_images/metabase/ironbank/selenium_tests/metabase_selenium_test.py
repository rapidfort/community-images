"""The selenium test."""
# pylint: skip-file

# Generated by Selenium IDE
import json  # pylint: disable=import-error disable=unused-import
import time  # pylint: disable=import-error disable=unused-import
import pytest  # pylint: disable=import-error disable=unused-import
from selenium import webdriver  # pylint: disable=import-error
from selenium.webdriver.chrome.options import Options  # pylint: disable=import-error
from selenium.webdriver.common.by import By  # pylint: disable=import-error
from selenium.webdriver.common.action_chains import ActionChains  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support import expected_conditions  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support.wait import WebDriverWait  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.keys import Keys  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

class Testmetabasetest():
    """The test class for testing metabase image."""

    def setup_method(self, method):  # pylint: disable=unused-argument
        """setup method."""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument("disable-infobars")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        self.driver = webdriver.Chrome(
            options=chrome_options)  # pylint: disable=attribute-defined-outside-init
        self.driver.implicitly_wait(10)

    def teardown_method(self, method):  # pylint: disable=unused-argument
        """teardown method."""
        self.driver.quit()
    
    def test_initialization(self, params):
        self.driver.get("http://{}:{}/".format(params["server"], params["port"]))
        # setup page interaction, Database Configuration, Navigation Testing, interaction with  specific elements, possibly to verify their functionality or visibility
        # dashboard creation and visualization core feature are tested here
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.XPATH, "//button/div/div").click()
        self.driver.find_element(By.XPATH, "//span[contains(.,\'English\')]").click()
        self.driver.find_element(By.XPATH, "//button[contains(.,\'Next\')]").click()
        #login credentials
        self.driver.find_element(By.ID, "3").send_keys("test")
        self.driver.find_element(By.ID, "5").click()
        self.driver.find_element(By.ID, "5").send_keys("rf@test.com")
        self.driver.find_element(By.ID, "6").click()
        self.driver.find_element(By.ID, "6").send_keys("rf_test")
        self.driver.find_element(By.ID, "7").click()
        self.driver.find_element(By.ID, "7").send_keys("abcd1234#")
        self.driver.find_element(By.ID, "8").click()
        self.driver.find_element(By.ID, "8").send_keys("abcd1234#")
        self.driver.find_element(By.XPATH, "//button/div/div").click()
        self.driver.find_element(By.XPATH, "//div[@id=\'root\']/div/div/main/div/div/section[3]/div[3]/div[2]/div[4]/div/div/input").click()
        self.driver.find_element(By.XPATH, "//button/div/div").click()
        self.driver.find_element(By.XPATH, "//li[2]/div").click()
        self.driver.find_element(By.XPATH, "//div[11]/button/div/div").click()
        self.driver.find_element(By.XPATH, "//button/div/div").click()
        self.driver.find_element(By.LINK_TEXT, "Take me to Metabase").click()
        self.driver.close()
