"""The selenium test."""
# pylint: skip-file

# Generated by Selenium IDE
import json  # pylint: disable=import-error disable=unused-import
import time  # pylint: disable=import-error disable=unused-import
import pytest  # pylint: disable=import-error disable=unused-import
from selenium import webdriver  # pylint: disable=import-error
from selenium.webdriver.chrome.options import Options  # pylint: disable=import-error
from selenium.webdriver.common.by import By  # pylint: disable=import-error
from selenium.webdriver.common.action_chains import ActionChains  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support import expected_conditions  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support.wait import WebDriverWait  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.keys import Keys  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities  # pylint: disable=import-error disable=unused-import


class TestMinio():
    """The test class for testing minio image."""

    def setup_method(self, method):  # pylint: disable=unused-argument
        """setup method."""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument("disable-infobars")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        self.driver = webdriver.Chrome(
            options=chrome_options)  # pylint: disable=attribute-defined-outside-init
        self.driver.implicitly_wait(10)

    def teardown_method(self, method):  # pylint: disable=unused-argument
        """teardown method."""
        self.driver.quit()

    def test_ui(self, params):
        self.driver.get("http://{}:{}/login".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1296, 688)
        #testing login
        self.driver.find_element(By.ID, "accessKey").click()
        self.driver.find_element(By.ID, "accessKey").send_keys("minio")
        self.driver.find_element(By.ID, "secretKey").click()
        self.driver.find_element(By.ID, "secretKey").send_keys("minio123")
        self.driver.find_element(By.ID, "do-login").click()
        self.driver.find_element(By.XPATH, "//button[2]/span/span[2]").click()
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Buckets\')]").click()
        #testing bucket creation
        self.driver.find_element(By.ID, "create-bucket").click()
        self.driver.find_element(By.ID, "bucket-name").click()
        self.driver.find_element(By.ID, "bucket-name").send_keys("data-storage")
        self.driver.find_element(By.ID, "create-bucket").click()
        self.driver.find_element(By.XPATH, "//span[2]").click()
        self.driver.find_element(By.ID, "object-browser").click()
        #testing upload
        self.driver.find_element(By.XPATH, "//div[@id='root']/div/main/div[2]/div/div/div[2]/div/div/div/div/div[2]/div/div/div/span/div").click()
        self.driver.find_element(By.ID, "upload-main")
    
        self.driver.find_element(By.ID, "object-browser").click()
        self.driver.find_element(By.ID, "buckets").click()
        self.driver.find_element(By.ID, "manageBucket-data-storage").click()
        self.driver.find_element(By.ID, "delete-bucket-button").click()
        self.driver.find_element(By.ID, "confirm-ok").click()
        # self.driver.find_element(By.XPATH, "//div[6]/button/span/span[2]").click()
        self.driver.find_element(By.XPATH, "//button[4]/span/span[2]").click()
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Identity\')]").click()
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Users\')]").click()
        #testing other ui features
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Groups\')]").click()
        self.driver.find_element(By.XPATH, "//div[3]/div/button[3]/span/span[2]").click()
        self.driver.find_element(By.XPATH, "//span[contains(.,\'LDAP\')]").click()
        self.driver.find_element(By.ID, "tools").click()
        self.driver.find_element(By.ID, "monitorMetrics").click()
        self.driver.find_element(By.XPATH, "//div[4]/div/button[3]/span/span[2]").click()
        self.driver.find_element(By.ID, "monitorTrace").click()
        self.driver.find_element(By.XPATH, "//button[5]/span/span[2]").click()
        self.driver.find_element(By.XPATH, "//div[2]/button[5]/span/span[2]").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.ID, "tiers").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Site Replication\')]").click()
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Configuration\')]").click()
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Performance\')]").click()
        
        self.driver.find_element(By.XPATH, "//button[12]/span/span[2]").click()
        self.driver.find_element(By.XPATH, "//button[13]/span/span[2]").click()
        self.driver.find_element(By.XPATH, "//div[6]/button").click()

        self.driver.close()
