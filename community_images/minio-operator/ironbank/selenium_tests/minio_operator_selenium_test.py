"""The selenium test."""
# pylint: skip-file

# Generated by Selenium IDE
import json  # pylint: disable=import-error disable=unused-import
import time  # pylint: disable=import-error disable=unused-import
import pytest  # pylint: disable=import-error disable=unused-import
from selenium import webdriver  # pylint: disable=import-error
from selenium.webdriver.chrome.options import Options  # pylint: disable=import-error
from selenium.webdriver.common.by import By  # pylint: disable=import-error
from selenium.webdriver.common.action_chains import ActionChains  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support import expected_conditions  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support.wait import WebDriverWait  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.keys import Keys  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities  # pylint: disable=import-error disable=unused-import


class TestMinioOperator():
    """The test word press class for testing minio-operator image."""

    def setup_method(self, method):  # pylint: disable=unused-argument
        """setup method."""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument("disable-infobars")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        self.driver = webdriver.Chrome(
            options=chrome_options)  # pylint: disable=attribute-defined-outside-init
        self.driver.implicitly_wait(60)

    def teardown_method(self, method):  # pylint: disable=unused-argument
        """teardown method."""
        self.driver.quit()

    def test_minio_operator(self, params):
        namespace = params["server"].split()[0]
        jwt = params["server"].split()[1]
        print("Namespace:", namespace)
        print("JWT:", jwt)

        self.driver.get(
                "http://localhost:{}/".format(
                    params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1366, 732)

        # # Login # #
        self.driver.find_element(By.ID, "jwt").click()
        self.driver.find_element(By.ID, "jwt").send_keys(jwt)
        self.driver.find_element(By.ID, "do-login").click()

        # # Create tenant # #
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, "#create-tenant > .button-label").click()
        self.driver.find_element(By.ID, "tenant-name").click()
        self.driver.find_element(By.ID, "tenant-name").send_keys("first-tenant")
        self.driver.find_element(By.ID, "namespace").click()
        self.driver.find_element(By.ID, "namespace").send_keys(namespace)
        self.driver.find_element(By.ID, "nodes").click()
        time.sleep(5)
        self.driver.find_element(By.ID, "nodes").send_keys("\b1")
        time.sleep(5)
        self.driver.find_element(By.ID, "nodes").send_keys("\b1")
        self.driver.find_element(By.ID, "drivesps").click()
        self.driver.find_element(By.ID, "drivesps").send_keys("1")
        self.driver.find_element(By.ID, "wizard-step-configure").click()
        self.driver.find_element(By.ID, "wizard-step-images").click()
        self.driver.find_element(By.ID, "wizard-step-pod-placement").click()
        self.driver.find_element(By.ID, "wizard-step-identity-provider").click()
        self.driver.find_element(By.ID, "wizard-step-security").click()
        self.driver.find_element(By.ID, "wizard-step-encryption").click()
        self.driver.find_element(By.ID, "wizard-button-Create").click()
        self.driver.find_element(By.CSS_SELECTOR, "#download-button > .button-label").click()
        self.driver.find_element(By.ID, "close").click()

        # # Monkey clicking on created tenant # #
        self.driver.find_element(By.XPATH, "//div[@id=\'list-tenant-first-tenant\']/div/div[2]/div/div").click()
        self.driver.find_element(By.ID, "tenant-refresh").click()
        self.driver.find_element(By.CSS_SELECTOR, "#tenant-hop .min-icon").click()
        self.driver.find_element(By.ID, "tenant-hop").click()
        self.driver.find_element(By.ID, "details-configuration").click()
        self.driver.find_element(By.ID, "details-metrics").click()
        self.driver.find_element(By.ID, "details-idp").click()
        self.driver.find_element(By.ID, "details-security").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.ID, "details-encryption").click()
        self.driver.find_element(By.ID, "details-pools").click()
        self.driver.find_element(By.ID, "tenant-pod-tab").click()
        self.driver.find_element(By.ID, "details-volumes").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.ID, "details-events").click()
        self.driver.find_element(By.ID, "details-csr").click()

        # # Monkey clicking sidenav # #
        self.driver.find_element(By.ID, "details-license").click()
        self.driver.find_element(By.ID, "License").click()
        self.driver.find_element(By.CSS_SELECTOR, "#close > .min-icon").click()
        self.driver.find_element(By.ID, "Register").click()

        # # Delete tenant # #
        self.driver.get(
                "http://localhost:{}/tenants".format(
                    params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.find_element(By.XPATH, "//div[@id=\'list-tenant-first-tenant\']/div/div[2]/div/div").click()
        self.driver.find_element(By.ID, "delete-tenant").click()
        self.driver.find_element(By.ID, "retype-tenant").click()
        self.driver.find_element(By.ID, "retype-tenant").send_keys("first-tenant")
        self.driver.find_element(By.CSS_SELECTOR, ".switchRail").click()
        self.driver.find_element(By.CSS_SELECTOR, "#confirm-ok > .button-label").click()

        # # Logout # #
        self.driver.find_element(By.XPATH, "//button[@id=\'sign-out\']/span").click()
        self.driver.close()
