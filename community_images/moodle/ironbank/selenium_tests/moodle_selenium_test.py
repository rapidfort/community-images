"""The selenium test."""
# pylint: skip-file

# Generated by Selenium IDE
import json  # pylint: disable=import-error disable=unused-import
import time  # pylint: disable=import-error disable=unused-import
import pytest  # pylint: disable=import-error disable=unused-import
from selenium import webdriver  # pylint: disable=import-error
from selenium.webdriver.chrome.options import Options  # pylint: disable=import-error
from selenium.webdriver.common.by import By  # pylint: disable=import-error
from selenium.webdriver.common.action_chains import ActionChains  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support import expected_conditions  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support.wait import WebDriverWait  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.keys import Keys  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities  # pylint: disable=import-error disable=unused-import


class TestMoodle():
    """The test word press class for testing wordpress image."""

    def setup_method(self, method):  # pylint: disable=unused-argument
        """setup method."""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument("disable-infobars")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        self.driver = webdriver.Chrome(
            options=chrome_options)  # pylint: disable=attribute-defined-outside-init
        self.driver.implicitly_wait(10)

    def teardown_method(self, method):  # pylint: disable=unused-argument
        """teardown method."""
        self.driver.quit()

    def test_installation(self, params):
        self.driver.get("http://{}:{}/".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1366, 732)
        self.driver.find_element(By.ID, "nextbutton").click()
        self.driver.find_element(By.ID, "nextbutton").click()
        dropdown = self.driver.find_element(By.ID, "dbtype")
        dropdown.find_element(By.XPATH, "//option[. = 'PostgreSQL (native/pgsql)']").click()
        element = self.driver.find_element(By.ID, "dbtype")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "dbtype")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "dbtype")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "nextbutton").click()
        self.driver.find_element(By.ID, "id_dbhost").click()
        self.driver.find_element(By.ID, "id_dbhost").click()
        element = self.driver.find_element(By.ID, "id_dbhost")
        actions = ActionChains(self.driver)
        actions.double_click(element).perform()
        self.driver.find_element(By.ID, "id_dbhost").send_keys("db")
        self.driver.find_element(By.ID, "id_dbuser").click()
        self.driver.find_element(By.ID, "id_dbuser").send_keys("moodle")
        self.driver.find_element(By.ID, "id_dbpass").click()
        self.driver.find_element(By.ID, "id_dbpass").send_keys("db-passwd-123")
        self.driver.find_element(By.ID, "nextbutton").click()
        self.driver.find_element(By.XPATH, "//div[2]/form/button").click()
        self.driver.find_element(By.XPATH, "//section[@id=\'region-main\']/div/div[5]/form/button").click()
        self.driver.find_element(By.XPATH, "//section[@id=\'region-main\']/div/div[441]/form/button").click()
        self.driver.find_element(By.CSS_SELECTOR, "em").click()
        element = self.driver.find_element(By.ID, "id_email")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_moodlecontainer")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_moodlecontainer").click()
        self.driver.find_element(By.ID, "id_email").send_keys("admin@rfmodfake.com")
        self.driver.find_element(By.XPATH, "//em[contains(.,\'Click to enter text\')]").click()
        self.driver.find_element(By.ID, "id_newpassword").send_keys("5UP3R_53cret")
        self.driver.find_element(By.ID, "id_submitbutton").click()
        self.driver.find_element(By.ID, "id_s__fullname").click()
        self.driver.find_element(By.ID, "id_s__fullname").send_keys("Rapidfort Community Moodle")
        self.driver.find_element(By.ID, "id_s__shortname").click()
        self.driver.find_element(By.ID, "id_s__shortname").send_keys("RfMood")
        self.driver.execute_script("window.scrollTo(0,482)")
        self.driver.find_element(By.ID, "id_s__supportemail").click()
        self.driver.find_element(By.ID, "id_s__supportemail").send_keys("support@rfmood.cox")
        self.driver.find_element(By.CSS_SELECTOR, ".form-submit").click()

        self.driver.find_element(By.LINK_TEXT, "Site administration").click()
        self.driver.find_element(By.LINK_TEXT, "Users").click()
        self.driver.find_element(By.LINK_TEXT, "Add a new user").click()
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("rf-user")
        self.driver.find_element(By.CSS_SELECTOR, "em").click()
        self.driver.find_element(By.ID, "id_newpassword").send_keys("5UP3R_53cret")
        element = self.driver.find_element(By.ID, "id_firstname")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_moodlecontainer")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_moodlecontainer").click()
        self.driver.find_element(By.ID, "id_firstname").send_keys("Rapidfort")
        self.driver.find_element(By.ID, "id_lastname").click()
        self.driver.find_element(By.ID, "id_lastname").send_keys("Moodleuser")
        self.driver.find_element(By.ID, "id_email").click()
        self.driver.find_element(By.ID, "id_email").send_keys("rf@moodle")
        self.driver.find_element(By.ID, "id_email").send_keys("rf@rfmood.cox")
        self.driver.find_element(By.ID, "id_submitbutton").click()

        self.driver.find_element(By.LINK_TEXT, "My courses").click()
        self.driver.find_element(By.CSS_SELECTOR, "#page-my-index > div:nth-child(4)").click()
        self.driver.find_element(By.XPATH, "//div[@id=\'action_bar\']/div[2]/form/button").click()
        self.driver.find_element(By.ID, "id_fullname").click()
        self.driver.find_element(By.ID, "id_fullname").send_keys("Rapidfort First Course")
        self.driver.find_element(By.ID, "id_shortname").click()
        self.driver.find_element(By.ID, "id_shortname").send_keys("FirstCourse")
        self.driver.find_element(By.ID, "id_saveanddisplay").click()
        self.driver.find_element(By.NAME, "setmode").click()

        self.driver.get("http://{}:{}/admin/search.php".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.get("http://{}:{}/admin/settings.php?section=analyticssite".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.get("http://{}:{}/admin/settings.php?section=licensesettings".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.find_element(By.LINK_TEXT, "General").click()
        self.driver.find_element(By.LINK_TEXT, "Licence manager").click()
        self.driver.find_element(By.XPATH, "//table[@id='manage-licenses']/tbody/tr/td/a/i").click()
        self.driver.find_element(By.XPATH, "//table[@id='manage-licenses']/tbody/tr/td/a/i").click()
        self.driver.find_element(By.LINK_TEXT, "Create licence").click()
        self.driver.find_element(By.ID, "id_shortname").click()
        self.driver.find_element(By.ID, "id_shortname").send_keys("Fake lic")
        self.driver.find_element(By.ID, "id_fullname").click()
        self.driver.find_element(By.ID, "id_fullname").send_keys("Fake lisence")
        self.driver.find_element(By.ID, "id_source").click()
        self.driver.find_element(By.ID, "id_source").send_keys("http://fakelics.get/fakes.lic")
        self.driver.find_element(By.ID, "id_submitbutton").click()
        self.driver.find_element(By.LINK_TEXT, "General").click()
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()
        self.driver.close()
