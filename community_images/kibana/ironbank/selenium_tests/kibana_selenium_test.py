"""The selenium test."""
# pylint: skip-file

# Generated by Selenium IDE
import json  # pylint: disable=import-error disable=unused-import
import time  # pylint: disable=import-error disable=unused-import
import pytest  # pylint: disable=import-error disable=unused-import
from selenium import webdriver  # pylint: disable=import-error
from selenium.webdriver.chrome.options import Options  # pylint: disable=import-error
from selenium.webdriver.common.by import By  # pylint: disable=import-error
from selenium.webdriver.common.action_chains import ActionChains  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support import expected_conditions  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support.wait import WebDriverWait  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.keys import Keys  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities  # pylint: disable=import-error disable=unused-import

class TestKibanatest():
    def setup_method(self, method):  # pylint: disable=unused-argument
        """setup method."""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument("disable-infobars")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument('ignore-certificate-errors')

        self.driver = webdriver.Chrome(
            options=chrome_options)  # pylint: disable=attribute-defined-outside-init
        self.driver.implicitly_wait(10)

    def teardown_method(self, method):  # pylint: disable=unused-argument
        """teardown method."""
        self.driver.quit()
    
    #adding sample data  
    def test_sampledata(self, params):
        """test kibana."""
        self.driver.get("http://{}:{}/app/home#/tutorial_directory/sampleData".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.CSS_SELECTOR, ".euiFlexItem:nth-child(1) > .euiPanel .euiButton__text").click()
        time.sleep(10)
        self.driver.close()
    
    # performing task with data on dashboard and different filters
    def test_dashboard(self, params):
        self.driver.get("http://{}:{}/app/dashboards".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1296, 688)
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiButton__text")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        time.sleep(10)
        self.driver.find_element(By.LINK_TEXT, "[eCommerce] Revenue Dashboard").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.execute_script("window.scrollTo(0,986)")
        self.driver.find_element(By.CSS_SELECTOR, ".euiSuperDatePicker__prettyFormatLink").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiButtonContent > .euiIcon-isLoaded > path")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiButtonContent > .euiIcon-isLoaded")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.CSS_SELECTOR, ".euiButtonContent > .euiIcon-isLoaded").click()
        self.driver.find_element(By.CSS_SELECTOR, ".globalFilterBar__addButton .euiButtonEmpty__text").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiButtonEmpty--flushRight .euiButtonEmpty__text").click()
        self.driver.close()
    
    # visualization of data in terms of divisions
    def test_discover(self, params):
        self.driver.get("http://{}:{}/app/discover".format(params["server"], params["port"]))
        self.driver.set_window_size(1296, 688)
        self.driver.execute_script("window.scrollTo(0,123.33333587646484)")
        self.driver.find_element(By.CSS_SELECTOR, ".dscFieldList:nth-child(3) > li:nth-child(3) .dscSidebarField__name").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiPopoverFooter .euiButtonContent").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiTitle")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".euiSuperDatePicker__prettyFormatLink").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiSuperUpdateButton .euiIcon").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiSuperUpdateButton path")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.close()
    
    # a theme test of data on ui
    def test_canvas(self, params):
        self.driver.get("http://{}:{}/app/canvas".format(params["server"], params["port"]))  
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.CSS_SELECTOR, ".euiLink > span:nth-child(1)").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.CSS_SELECTOR, ".euiFlexItem:nth-child(2) > .euiPopover .euiButtonEmpty__text").click()
        element = self.driver.find_element(By.ID, "canvasWorkpadContainer")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "canvasWorkpadContainer")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "canvasWorkpadContainer")
        actions = ActionChains(self.driver)
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.close()
        
    # testing map section of kibana ui
    def test_maps(self, params):
        self.driver.get("http://{}:{}/app/maps".format(params["server"], params["port"]))  
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.CSS_SELECTOR, ".euiTableCellContent > .euiLink").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "#c54wk .euiButtonEmpty__text")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, "#qvhh3 .euiButtonEmpty__text").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.CSS_SELECTOR, "#y3fjb .euiButtonEmpty__text").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "#ui5f8 .euiButtonEmpty__text")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, "#ui5f8 .euiButtonEmpty__text").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "#jmtgf .euiButtonEmpty__text")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, "#jmtgf .euiButtonEmpty__text").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, "#\\30hmz5 .euiButtonEmpty__text").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiSuperDatePicker__prettyFormatLink").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiButton--fill .euiIcon").click()
        self.driver.execute_script("window.scrollTo(0,124.66666412353516)")
        self.driver.close()
        
    # visualization of different sections of data in ui
    def test_visualize(self, params):
        self.driver.get("http://{}:{}/app/visualize".format(params["server"], params["port"]))  
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.LINK_TEXT, "Avg. items sold").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.CSS_SELECTOR, ".euiSuperDatePicker__prettyFormatLink").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiSuperUpdateButton__text").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiDatePopoverButton--end")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".kbnToolbarButton--normal .euiButton__text").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.CSS_SELECTOR, ".euiFlexItem > .euiPopover > .euiPopover__anchor > .euiButton > .euiButtonContent").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiFlexItem > .euiPopover > .euiPopover__anchor > .euiButton > .euiButtonContent").click()
        self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) .kbnFieldButton__name > span").click()
        self.driver.close()
    
    # deleting of data added
    def test_deletingdata(self, params):
        """test kibana."""
        self.driver.get("http://{}:{}/app/home#/tutorial_directory/sampleData".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.CSS_SELECTOR, ".euiButtonEmpty--danger .euiButtonEmpty__text").click()
        self.driver.close()
    
    # testing dev tools of kibana in console
    def test_tools(self, params):
        self.driver.get("http://{}:{}/app/dev_tools".format(params["server"], params["port"]))  
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.CSS_SELECTOR, ".euiTab:nth-child(2) .euiToolTipAnchor > span").click()
        self.driver.find_element(By.CSS_SELECTOR, ".euiTab:nth-child(3) .euiToolTipAnchor > span").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiTab-isSelected .euiToolTipAnchor > span")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiFlexItem:nth-child(1)")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".euiTab:nth-child(1) .euiToolTipAnchor > span").click()
        self.driver.execute_script("window.scrollTo(0,1.3333333730697632)")
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiTab-isSelected")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.close()
    
    # testing security alerts ui
    def test_alerts(self, params):
        self.driver.get("http://{}:{}/app/security/alerts".format(params["server"], params["port"]))
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.CSS_SELECTOR, ".timeline-flyout-button-bar .euiButtonEmpty__text > .euiFlexGroup > .euiFlexItem:nth-child(2)").click()
        self.driver.close()
        
    #testing observability section of ui
    def test_observe(self, params):
        self.driver.get("http://{}:{}/app/observability/overview".format(params["server"], params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1296, 688)
        self.driver.find_element(By.CSS_SELECTOR, ".euiButton--fill > .euiButtonContent").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        element = self.driver.find_element(By.CSS_SELECTOR, ".euiTab:nth-child(2) > .euiTab__content")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".euiTab:nth-child(2) > .euiTab__content").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.LINK_TEXT, "Integrations").click()
        self.driver.close()