"""The selenium test."""
# pylint: skip-file

# Generated by Selenium IDE
import json  # pylint: disable=import-error disable=unused-import
import time  # pylint: disable=import-error disable=unused-import
import pytest  # pylint: disable=import-error disable=unused-import
from selenium import webdriver  # pylint: disable=import-error
from selenium.webdriver.chrome.options import Options  # pylint: disable=import-error
from selenium.webdriver.common.by import By  # pylint: disable=import-error
from selenium.webdriver.common.action_chains import ActionChains  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support import expected_conditions  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support.wait import WebDriverWait  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.keys import Keys  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities  # pylint: disable=import-error disable=unused-import
from selenium.webdriver.support import expected_conditions as EC

class TestGrafanatest1():
    """The test word press class for testing grafana image."""

    def setup_method(self, method):  # pylint: disable=unused-argument
        """setup method."""

        chrome_options = Options()
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument("disable-infobars")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.set_capability(
                        "goog:loggingPrefs", {"performance": "ALL", "browser": "ALL"}
                    )

        self.driver = webdriver.Chrome(
            options=chrome_options)  # pylint: disable=attribute-defined-outside-init
        self.driver.implicitly_wait(10)

    def teardown_method(self, method):  # pylint: disable=unused-argument
        """teardown method."""
        self.driver.quit()

    def test_login(self, params):
        # Test name: initialize-and-setup-prometheus
        self.driver.get(
                "http://{}:{}/".format(
                    params['server'],
                    params["port"]))  # pylint: disable=consider-using-f-string
        self.driver.set_window_size(1920, 1080)
        self.driver.implicitly_wait(3)


        self.driver.find_element(By.CSS_SELECTOR, ".css-fmaj2t-Icon > path").click()
        self.driver.find_element(By.CSS_SELECTOR, ".css-fv3lde:nth-child(6) > .css-1cta28a-button .css-1d3xu67-Icon").click()
        self.driver.find_element(By.CSS_SELECTOR, ".css-7mqxjg:nth-child(2) .css-6pogpz").click()
        self.driver.find_element(By.CSS_SELECTOR, ".css-td06pi-button > .css-1riaxdn").click()
        self.driver.find_element(By.CSS_SELECTOR, ".add-data-source-category:nth-child(1) .css-13o7eu2:nth-child(1) .css-1cqw476").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.ID, "connection-url").click()
        self.driver.find_element(By.ID, "connection-url").send_keys("http://prometheus:9090")
        self.driver.find_element(By.CSS_SELECTOR, ".css-td06pi-button > .css-1riaxdn").click()
        self.driver.get_screenshot_as_file("screenshot0.png")

        ### Dashboards setup
        # 1 | open | /datasources/edit/<hex>/dashboards |  | 
        self.driver.get(
            "http://{}:{}/datasources/edit/{}/dashboards".format(
                params['server'],
                params['port'],
                self.driver.current_url[-36:]))
        self.driver.implicitly_wait(10)
        self.driver.get_screenshot_as_file("screenshot1.png")
        print(self.driver.current_url)
        # 3 | click | css=tr:nth-child(2) .css-1mhnkuh |  | 
        self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) .css-1riaxdn").click()
        self.driver.implicitly_wait(10)
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) .css-1riaxdn").click()
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.implicitly_wait(10)
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(3) .css-1riaxdn").click()
        # 4 | click | linkText=Prometheus 2.0 Stats |  | 
        self.driver.implicitly_wait(10)
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.find_element(By.LINK_TEXT, "Prometheus 2.0 Stats").click()
        # 5 | runScript | window.scrollTo(0,0) |  | 
        self.driver.execute_script("window.scrollTo(0,0)")

        # Alert manager
        self.driver.get(
            "http://{}:{}/connections/add-new-connection".format(
                params['server'],
                params['port']))
        self.driver.set_window_size(727, 785)
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.find_element(By.CSS_SELECTOR, ".css-8tk2dk-input-input").click()
        self.driver.get_screenshot_as_file("screenshot1.png")
        # self.driver.find_element(By.CSS_SELECTOR, ".css-8tk2dk-input-input").send_keys("alert")
        # self.driver.find_element(By.CSS_SELECTOR, ".css-8tk2dk-input-input").send_keys("\n")
        self.driver.implicitly_wait(3)
        self.driver.get_screenshot_as_file("screenshot0.png")
        self.driver.find_element(By.LINK_TEXT, "Alertmanager").click()
        # self.driver.find_element(By.CSS_SELECTOR, ".css-1cqw476").click()
        self.driver.implicitly_wait(20)
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Add new data source\')]").click()
        self.driver.implicitly_wait(3)
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.find_element(By.CSS_SELECTOR, ".gf-form-input:nth-child(1)").send_keys("http://localhost:9093")
        self.driver.implicitly_wait(3)
        self.driver.get_screenshot_as_file("screenshot1.png")
        self.driver.find_element(By.XPATH, "//span[contains(.,'Save & test')]").click()

        self.driver.get(
            "http://{}:{}/connections/datasources/new".format(
                params['server'],
                params['port']))
        self.driver.set_window_size(1366, 732)
        self.driver.find_element(By.XPATH, "//button[contains(.,\'Tempo\')]").click()
        self.driver.find_element(By.ID, "connection-url").click()
        self.driver.find_element(By.ID, "connection-url").send_keys("http://tempo:3200")
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Save & test\')]").click()
        self.driver.implicitly_wait(5)
        self.driver.find_element(By.XPATH, "//span[contains(.,\'Save & test\')]").click()
        self.driver.implicitly_wait(15)
        self.driver.get_screenshot_as_file("screenshot0.png")
        # self.driver.find_element(By.LINK_TEXT, "Explore view").click()
        self.driver.get(
            "http://{}:{}/explore?left=%7B%22datasource%22:%22tempo%22,%22context%22:%22explore%22%7D".format(
                params['server'],
                params['port']))
        self.driver.implicitly_wait(30)
        self.driver.get_screenshot_as_file("screenshot0.png")
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.CSS_SELECTOR, ".view-lines").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".inputarea").send_keys("{}")
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.XPATH, "//div[4]/div/button/div").click()
        self.driver.execute_script("window.scrollTo(0,0)")
        self.driver.find_element(By.ID, "option-traceqlSearch-radiogroup-16").click()

        # Running grafana in non authentication mode. As with authentication
        #     mode grafana doesnot load after sign in. So commented out.
        # User management
        # self.driver.get(
        #     "http://{}:{}/admin/users/create".format(
        #         params['server'],
        #         params['port']))
        # self.driver.set_window_size(727, 785)
        # self.driver.implicitly_wait(10)
        # self.driver.get_screenshot_as_file("screenshot1.png")
        # self.driver.find_element(By.ID, "name-input").click()
        # self.driver.find_element(By.ID, "name-input").send_keys("new user")
        # self.driver.find_element(By.ID, "email-input").click()
        # self.driver.find_element(By.ID, "email-input").send_keys("new@user.com")
        # self.driver.find_element(By.ID, "username-input").click()
        # self.driver.find_element(By.ID, "username-input").send_keys("new-user")
        # self.driver.find_element(By.ID, "password-input").click()
        # self.driver.find_element(By.ID, "password-input").send_keys("newuser")
        # self.driver.find_element(By.CSS_SELECTOR, ".css-1mhnkuh").click()
        # self.driver.find_element(By.CSS_SELECTOR, ".css-1fwxvu6").click()
        # self.driver.implicitly_wait(5)

        # # New User login
        # self.driver.get(
        #     "http://{}:{}/logout".format(
        #         params['server'],
        #         params['port']))
        # self.driver.find_element(By.NAME, "user").click()
        # self.driver.find_element(By.NAME, "user").send_keys("new-user")
        # self.driver.find_element(By.ID, "current-password").click()
        # self.driver.find_element(By.ID, "current-password").send_keys("newuser")
        # self.driver.find_element(By.CSS_SELECTOR, ".css-8csoim-button > .css-1mhnkuh").click()
        # self.driver.find_element(By.CSS_SELECTOR, ".css-1fwxvu6").click()
